- Async Telemetry Optimization (_articles/async-telemetry-optimization.md)
  - What This Means for You (_articles/async-telemetry-optimization.md:14)
  - The Async Advantage: Real Examples (_articles/async-telemetry-optimization.md:20)
    - Rails Controllers Stay Responsive (_articles/async-telemetry-optimization.md:22)
    - Concurrent Processing Actually Works (_articles/async-telemetry-optimization.md:54)
  - Zero Configuration Required (_articles/async-telemetry-optimization.md:80)
  - Perfect for Background Jobs (_articles/async-telemetry-optimization.md:102)
  - Development Benefits (_articles/async-telemetry-optimization.md:129)
    - Faster Test Suites (_articles/async-telemetry-optimization.md:131)
    - Better Development Experience (_articles/async-telemetry-optimization.md:148)
  - Technical Integration: How It Works (_articles/async-telemetry-optimization.md:161)
  - Configuration Options (_articles/async-telemetry-optimization.md:174)
  - What You Get (_articles/async-telemetry-optimization.md:195)
  - Real Performance Impact (_articles/async-telemetry-optimization.md:203)
  - When This Matters Most (_articles/async-telemetry-optimization.md:212)
  - Try It Today (_articles/async-telemetry-optimization.md:220)
- Concurrent Llm Processing Performance Gains (_articles/concurrent-llm-processing-performance-gains.md)
  - The Problem: Sequential Bottlenecks (_articles/concurrent-llm-processing-performance-gains.md:17)
  - The Solution: Concurrent Processing (_articles/concurrent-llm-processing-performance-gains.md:32)
  - Real Performance Results (_articles/concurrent-llm-processing-performance-gains.md:53)
  - How It Works: The Architecture (_articles/concurrent-llm-processing-performance-gains.md:67)
    - Key Components (_articles/concurrent-llm-processing-performance-gains.md:73)
  - Ruby's Async Ecosystem Excellence (_articles/concurrent-llm-processing-performance-gains.md:80)
  - Implementing Concurrent Processing (_articles/concurrent-llm-processing-performance-gains.md:96)
  - When Concurrent Processing Helps (_articles/concurrent-llm-processing-performance-gains.md:124)
  - Measuring Your Own Performance (_articles/concurrent-llm-processing-performance-gains.md:138)
  - Beyond the Coffee Shop (_articles/concurrent-llm-processing-performance-gains.md:163)
  - Practical Takeaways (_articles/concurrent-llm-processing-performance-gains.md:174)
- Dspy Async Sidekiq Integration (_articles/dspy-async-sidekiq-integration.md)
  - How DSPy.rb Handles Async Operations (_articles/dspy-async-sidekiq-integration.md:14)
    - LM#chat Uses Sync Blocks Internally (_articles/dspy-async-sidekiq-integration.md:16)
  - The Sidekiq Threading Problem (_articles/dspy-async-sidekiq-integration.md:46)
    - Blocking Approach - Inefficient Thread Usage (_articles/dspy-async-sidekiq-integration.md:48)
    - Non-blocking Approach - Efficient Resource Utilization (_articles/dspy-async-sidekiq-integration.md:71)
  - Real-World Example: Document Processing Pipeline (_articles/dspy-async-sidekiq-integration.md:103)
  - Performance Comparison (_articles/dspy-async-sidekiq-integration.md:200)
    - Sequential vs Concurrent Processing (_articles/dspy-async-sidekiq-integration.md:202)
  - Sidekiq Configuration for DSPy.rb (_articles/dspy-async-sidekiq-integration.md:236)
    - Optimal Worker Configuration (_articles/dspy-async-sidekiq-integration.md:238)
    - Monitoring Async Performance (_articles/dspy-async-sidekiq-integration.md:266)
  - Best Practices (_articles/dspy-async-sidekiq-integration.md:303)
    - 1. Design for Concurrency (_articles/dspy-async-sidekiq-integration.md:305)
    - 2. Memoize DSPy Objects (_articles/dspy-async-sidekiq-integration.md:324)
    - 3. Handle Failures Gracefully (_articles/dspy-async-sidekiq-integration.md:346)
  - Key Takeaways (_articles/dspy-async-sidekiq-integration.md:389)
- Dspy Rb 0 20 0 Release Announcement (_articles/dspy-rb-0-20-0-release-announcement.md)
  - Google Gemini: Another Provider, Same API (_articles/dspy-rb-0-20-0-release-announcement.md:16)
  - Fiber-Local Contexts: Clean Optimization Workflows (_articles/dspy-rb-0-20-0-release-announcement.md:34)
  - Program Persistence: Save Your Work (_articles/dspy-rb-0-20-0-release-announcement.md:58)
  - MIPROv2 Works Now (_articles/dspy-rb-0-20-0-release-announcement.md:79)
  - What This Means for Ruby Apps (_articles/dspy-rb-0-20-0-release-announcement.md:86)
  - What's Coming (_articles/dspy-rb-0-20-0-release-announcement.md:96)
  - Try It (_articles/dspy-rb-0-20-0-release-announcement.md:104)
- Dspy Rb Concurrent Architecture Deep Dive (_articles/dspy-rb-concurrent-architecture-deep-dive.md)
  - Ruby's Modern Async Approach: No Syntax Sugar Required (_articles/dspy-rb-concurrent-architecture-deep-dive.md:28)
    - The "Function Coloring" Problem Solved (_articles/dspy-rb-concurrent-architecture-deep-dive.md:34)
    - Battle-Tested Foundation (_articles/dspy-rb-concurrent-architecture-deep-dive.md:42)
  - Architecture Overview (_articles/dspy-rb-concurrent-architecture-deep-dive.md:51)
  - Core Architecture Components (_articles/dspy-rb-concurrent-architecture-deep-dive.md:59)
    - 1. Fiber-Based Concurrent Execution Model (_articles/dspy-rb-concurrent-architecture-deep-dive.md:61)
    - 2. Event-Driven Observability System (_articles/dspy-rb-concurrent-architecture-deep-dive.md:94)
    - 3. Isolated Telemetry Processing: Battle-Tested Architecture (_articles/dspy-rb-concurrent-architecture-deep-dive.md:148)
  - Production Trade-offs: Memory Protection vs. Data Completeness (_articles/dspy-rb-concurrent-architecture-deep-dive.md:215)
  - Concurrent Execution Flow Diagram (_articles/dspy-rb-concurrent-architecture-deep-dive.md:234)
  - Performance Analysis (_articles/dspy-rb-concurrent-architecture-deep-dive.md:273)
    - Benchmarked Improvements (_articles/dspy-rb-concurrent-architecture-deep-dive.md:275)
    - Async Retry Benefits (_articles/dspy-rb-concurrent-architecture-deep-dive.md:287)
    - Ruby Async Ecosystem Excellence (_articles/dspy-rb-concurrent-architecture-deep-dive.md:311)
  - Real-World Production Impact (_articles/dspy-rb-concurrent-architecture-deep-dive.md:319)
    - Rails Application Performance (_articles/dspy-rb-concurrent-architecture-deep-dive.md:321)
    - Background Job Efficiency (_articles/dspy-rb-concurrent-architecture-deep-dive.md:334)
    - Concurrent Document Processing (_articles/dspy-rb-concurrent-architecture-deep-dive.md:348)
  - Technical Innovation Highlights (_articles/dspy-rb-concurrent-architecture-deep-dive.md:366)
    - 1. Event System Architecture: Proven Pub-Sub Pattern (_articles/dspy-rb-concurrent-architecture-deep-dive.md:370)
    - 2. Zero-Configuration Observability (_articles/dspy-rb-concurrent-architecture-deep-dive.md:381)
    - 3. Resilient Background Processing: Industry-Standard Reliability (_articles/dspy-rb-concurrent-architecture-deep-dive.md:390)
  - Architecture Benefits Summary (_articles/dspy-rb-concurrent-architecture-deep-dive.md:399)
    - Performance: Industry-Proven Results (_articles/dspy-rb-concurrent-architecture-deep-dive.md:401)
    - Developer Experience (_articles/dspy-rb-concurrent-architecture-deep-dive.md:407)
    - Scalability: Enterprise-Grade Foundation (_articles/dspy-rb-concurrent-architecture-deep-dive.md:413)
  - Social Media Ready Highlights (_articles/dspy-rb-concurrent-architecture-deep-dive.md:419)
    - For LinkedIn (_articles/dspy-rb-concurrent-architecture-deep-dive.md:421)
    - For X.com (_articles/dspy-rb-concurrent-architecture-deep-dive.md:431)
  - Conclusion (_articles/dspy-rb-concurrent-architecture-deep-dive.md:440)
- Fiber Local Lm Contexts (_articles/fiber-local-lm-contexts.md)
  - The Problem: Complex Model Management (_articles/fiber-local-lm-contexts.md:15)
  - Introducing DSPy.with_lm (_articles/fiber-local-lm-contexts.md:25)
  - LM Resolution Hierarchy (_articles/fiber-local-lm-contexts.md:65)
  - Practical Use Cases (_articles/fiber-local-lm-contexts.md:102)
    - 1. A/B Testing Models (_articles/fiber-local-lm-contexts.md:104)
    - 2. Development/Production Model Switching (_articles/fiber-local-lm-contexts.md:153)
    - 3. Privacy-Sensitive Processing (_articles/fiber-local-lm-contexts.md:200)
    - 4. Optimization and Fine-Tuning (_articles/fiber-local-lm-contexts.md:248)
  - Nested Contexts and Exception Safety (_articles/fiber-local-lm-contexts.md:304)
  - Block Return Values (_articles/fiber-local-lm-contexts.md:337)
  - Thread and Fiber Safety (_articles/fiber-local-lm-contexts.md:357)
  - Best Practices (_articles/fiber-local-lm-contexts.md:387)
  - Migration Guide (_articles/fiber-local-lm-contexts.md:413)
  - Conclusion (_articles/fiber-local-lm-contexts.md:440)
- Introducing Google Gemini Support (_articles/introducing-google-gemini-support.md)
  - Why Google Gemini? (_articles/introducing-google-gemini-support.md:18)
  - Getting Started with Gemini (_articles/introducing-google-gemini-support.md:29)
  - Available Models (_articles/introducing-google-gemini-support.md:53)
    - Latest Models (2025) (_articles/introducing-google-gemini-support.md:57)
    - 2.0 Series (2024-2025) (_articles/introducing-google-gemini-support.md:62)
    - 1.5 Series (Production Ready) (_articles/introducing-google-gemini-support.md:66)
  - Type-Safe Text Generation (_articles/introducing-google-gemini-support.md:75)
  - Multimodal Capabilities: Images + Text (_articles/introducing-google-gemini-support.md:138)
  - Working with Multiple Images (_articles/introducing-google-gemini-support.md:212)
  - Chain of Thought Reasoning (_articles/introducing-google-gemini-support.md:253)
  - Advanced Configuration (_articles/introducing-google-gemini-support.md:296)
    - Custom Request Parameters (_articles/introducing-google-gemini-support.md:298)
    - Safety Filtering (_articles/introducing-google-gemini-support.md:314)
  - Provider-Specific Features (_articles/introducing-google-gemini-support.md:332)
    - Image Format Support (_articles/introducing-google-gemini-support.md:334)
    - Token Usage Tracking (_articles/introducing-google-gemini-support.md:349)
  - Performance Optimization Tips (_articles/introducing-google-gemini-support.md:368)
  - Error Handling (_articles/introducing-google-gemini-support.md:388)
  - Migration from Other Providers (_articles/introducing-google-gemini-support.md:411)
  - What's Next? (_articles/introducing-google-gemini-support.md:429)
  - Get Started Today (_articles/introducing-google-gemini-support.md:440)
- Observability In Action Langfuse (_articles/observability-in-action-langfuse.md)
  - The Reality of LLM Observability (_articles/observability-in-action-langfuse.md:17)
  - Zero-Config Langfuse Integration (_articles/observability-in-action-langfuse.md:23)
  - What Gets Tracked Automatically (_articles/observability-in-action-langfuse.md:42)
    - Raw Telemetry Stream (_articles/observability-in-action-langfuse.md:46)
    - Structured Trace Details (_articles/observability-in-action-langfuse.md:57)
  - Serialized Export Reliability (_articles/observability-in-action-langfuse.md:69)
  - What You Get For Free (_articles/observability-in-action-langfuse.md:101)
    - LLM Operation Tracking (_articles/observability-in-action-langfuse.md:105)
    - Module Execution Flow (_articles/observability-in-action-langfuse.md:111)
    - Concurrent Processing Insights (_articles/observability-in-action-langfuse.md:117)
  - Performance in Practice (_articles/observability-in-action-langfuse.md:123)
  - Beyond Basic Monitoring (_articles/observability-in-action-langfuse.md:133)
  - The Bottom Line (_articles/observability-in-action-langfuse.md:156)
- Program Persistence And Serialization (_articles/program-persistence-and-serialization.md)
  - The Problem: Optimization Investment (_articles/program-persistence-and-serialization.md:15)
  - Introducing Program Storage (_articles/program-persistence-and-serialization.md:25)
  - Basic Program Serialization (_articles/program-persistence-and-serialization.md:33)
  - Advanced Storage with ProgramStorage (_articles/program-persistence-and-serialization.md:100)
  - Loading and Using Saved Programs (_articles/program-persistence-and-serialization.md:140)
  - Program Management and History (_articles/program-persistence-and-serialization.md:170)
  - Import/Export for Collaboration (_articles/program-persistence-and-serialization.md:202)
  - Integration with Optimization Workflows (_articles/program-persistence-and-serialization.md:228)
  - Version Compatibility and Migration (_articles/program-persistence-and-serialization.md:317)
  - File Organization and Structure (_articles/program-persistence-and-serialization.md:356)
  - Best Practices (_articles/program-persistence-and-serialization.md:396)
  - Error Handling and Observability (_articles/program-persistence-and-serialization.md:418)
  - Migration Guide (_articles/program-persistence-and-serialization.md:443)
  - Conclusion (_articles/program-persistence-and-serialization.md:461)
- React Agent Tutorial (_articles/react-agent-tutorial.md)
  - What is a ReAct Agent? (_articles/react-agent-tutorial.md:15)
  - Step 1: Define Your Tools (_articles/react-agent-tutorial.md:25)
  - Step 2: Define Your Agent's Signature (_articles/react-agent-tutorial.md:142)
  - Step 3: Create the ReAct Agent (_articles/react-agent-tutorial.md:172)
  - Step 4: Understanding the Agent's Reasoning (_articles/react-agent-tutorial.md:206)
  - Advanced: Custom Tool Creation (_articles/react-agent-tutorial.md:259)
  - Error Handling and Retries (_articles/react-agent-tutorial.md:336)
  - Production Best Practices (_articles/react-agent-tutorial.md:381)
    - 1. Tool Timeouts (_articles/react-agent-tutorial.md:383)
    - 2. Caching Results (_articles/react-agent-tutorial.md:413)
    - 3. Async Tool Execution (_articles/react-agent-tutorial.md:443)
    - 4. Tool Authorization (_articles/react-agent-tutorial.md:469)
  - Debugging ReAct Agents (_articles/react-agent-tutorial.md:515)
  - ReAct vs CodeAct: A Practical Comparison (_articles/react-agent-tutorial.md:636)
  - Next Steps (_articles/react-agent-tutorial.md:640)
  - Conclusion (_articles/react-agent-tutorial.md:747)
- Run Llms Locally With Ollama And Type Safe Ruby (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md)
  - Why Local LLMs Matter (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md:15)
  - Getting Started with Ollama (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md:25)
  - Type-Safe Structured Outputs Work Seamlessly (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md:51)
  - Chain of Thought Reasoning (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md:109)
  - Remote Ollama Instances (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md:148)
  - Cost Analysis: Development Savings (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md:162)
  - Performance Considerations (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md:166)
  - What About Structured Output Support? (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md:190)
  - Best Practices for Local Development (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md:203)
  - Conclusion (_articles/run-llms-locally-with-ollama-and-type-safe-ruby.md:229)
- Memory Compaction System (advanced/memory-compaction.md)
  - Overview (advanced/memory-compaction.md:13)
  - Architecture (advanced/memory-compaction.md:22)
  - Configuration (advanced/memory-compaction.md:33)
    - Default Settings (advanced/memory-compaction.md:35)
    - Custom Configuration (advanced/memory-compaction.md:46)
  - Usage (advanced/memory-compaction.md:66)
    - Automatic Compaction (advanced/memory-compaction.md:68)
    - Manual Compaction (advanced/memory-compaction.md:84)
  - Compaction Strategies (advanced/memory-compaction.md:99)
    - 1. Size Compaction (advanced/memory-compaction.md:101)
    - 2. Age Compaction (advanced/memory-compaction.md:112)
    - 3. Deduplication (advanced/memory-compaction.md:123)
    - 4. Relevance Pruning (advanced/memory-compaction.md:134)
  - User Isolation (advanced/memory-compaction.md:146)
  - Instrumentation and Monitoring (advanced/memory-compaction.md:158)
    - Available Events (advanced/memory-compaction.md:178)
  - Performance Characteristics (advanced/memory-compaction.md:187)
    - Inline Processing (advanced/memory-compaction.md:189)
    - Efficiency Optimizations (advanced/memory-compaction.md:195)
    - Memory Impact (advanced/memory-compaction.md:201)
  - Integration Examples (advanced/memory-compaction.md:213)
    - With MemoryToolset (advanced/memory-compaction.md:215)
    - With Custom Memory Backends (advanced/memory-compaction.md:231)
  - Testing Compaction (advanced/memory-compaction.md:246)
    - Unit Testing (advanced/memory-compaction.md:248)
    - Integration Testing (advanced/memory-compaction.md:264)
  - Best Practices (advanced/memory-compaction.md:277)
    - Configuration Guidelines (advanced/memory-compaction.md:279)
    - Monitoring Recommendations (advanced/memory-compaction.md:286)
    - Production Considerations (advanced/memory-compaction.md:293)
  - Future Enhancements (advanced/memory-compaction.md:300)
  - Migration from Background Processing (advanced/memory-compaction.md:310)
- Memory Systems (advanced/memory-systems.md)
  - Overview (advanced/memory-systems.md:24)
  - Architecture (advanced/memory-systems.md:33)
  - Configuration (advanced/memory-systems.md:44)
    - Default Settings (advanced/memory-systems.md:46)
    - Custom Configuration (advanced/memory-systems.md:57)
  - Usage (advanced/memory-systems.md:77)
    - Automatic Compaction (advanced/memory-systems.md:79)
    - Manual Compaction (advanced/memory-systems.md:95)
  - Compaction Strategies (advanced/memory-systems.md:110)
    - 1. Size Compaction (advanced/memory-systems.md:112)
    - 2. Age Compaction (advanced/memory-systems.md:123)
    - 3. Deduplication (advanced/memory-systems.md:134)
    - 4. Relevance Pruning (advanced/memory-systems.md:145)
  - User Isolation (advanced/memory-systems.md:157)
  - Instrumentation and Monitoring (advanced/memory-systems.md:169)
    - Available Events (advanced/memory-systems.md:189)
  - Performance Characteristics (advanced/memory-systems.md:198)
    - Inline Processing (advanced/memory-systems.md:200)
    - Efficiency Optimizations (advanced/memory-systems.md:206)
    - Memory Impact (advanced/memory-systems.md:212)
  - Integration Examples (advanced/memory-systems.md:224)
    - With MemoryToolset (advanced/memory-systems.md:226)
    - With Custom Memory Backends (advanced/memory-systems.md:242)
  - Testing Compaction (advanced/memory-systems.md:257)
    - Unit Testing (advanced/memory-systems.md:259)
    - Integration Testing (advanced/memory-systems.md:275)
  - Best Practices (advanced/memory-systems.md:288)
    - Configuration Guidelines (advanced/memory-systems.md:290)
    - Monitoring Recommendations (advanced/memory-systems.md:297)
    - Production Considerations (advanced/memory-systems.md:304)
  - Future Enhancements (advanced/memory-systems.md:311)
  - Migration from Background Processing (advanced/memory-systems.md:321)
- Event System vs Monkey-Patching (advanced/observability-interception.md)
  - The Problem with Monkey-Patching (advanced/observability-interception.md:22)
    - ❌ Old Approach: Complex Logger Backend Override (advanced/observability-interception.md:26)
- Retrieval Augmented Generation (RAG) (advanced/rag.md)
  - Overview (advanced/rag.md:23)
  - Basic RAG Implementation (advanced/rag.md:31)
    - Simple RAG with External Service (advanced/rag.md:33)
    - Multi-Step RAG Pipeline (advanced/rag.md:107)
  - RAG with Filtering and Reranking (advanced/rag.md:214)
  - Integration with External Services (advanced/rag.md:306)
    - Vector Database Integration (advanced/rag.md:308)
    - Hybrid Search Implementation (advanced/rag.md:355)
  - RAG Evaluation (advanced/rag.md:393)
  - Best Practices (advanced/rag.md:479)
    - 1. Design Context-Aware Signatures (advanced/rag.md:481)
    - 2. Handle Retrieval Failures (advanced/rag.md:501)
    - 3. Optimize Context Length (advanced/rag.md:521)
    - 4. Monitor RAG Performance (advanced/rag.md:539)
  - Related Topics (advanced/rag.md:558)
    - Core Concepts (advanced/rag.md:560)
    - Advanced Patterns (advanced/rag.md:565)
    - Optimization (advanced/rag.md:570)
    - Framework Comparison (advanced/rag.md:574)
    - Production (advanced/rag.md:577)
- Rails Integration Guide (advanced/rails-integration.md)
  - Enum Handling (advanced/rails-integration.md:13)
    - The Problem (advanced/rails-integration.md:17)
    - The Solution (advanced/rails-integration.md:31)
    - Working with ActiveRecord Enums (advanced/rails-integration.md:56)
    - Debugging Enum Values (advanced/rails-integration.md:85)
  - Service Object Pattern (advanced/rails-integration.md:112)
  - ActiveJob Integration (advanced/rails-integration.md:163)
  - Rails Cache Integration (advanced/rails-integration.md:191)
  - Configuration in Rails (advanced/rails-integration.md:221)
  - Model Validations (advanced/rails-integration.md:249)
  - Form Helpers (advanced/rails-integration.md:273)
  - Testing with RSpec (advanced/rails-integration.md:295)
  - Common Pitfalls and Solutions (advanced/rails-integration.md:329)
    - 1. Enum Comparison Issues (advanced/rails-integration.md:331)
    - 2. JSON Serialization (advanced/rails-integration.md:344)
    - 3. Strong Parameters (advanced/rails-integration.md:361)
  - Using Lifecycle Callbacks with Rails Patterns (advanced/rails-integration.md:375)
    - Callbacks with Service Objects (advanced/rails-integration.md:379)
    - Callbacks with ActiveRecord Integration (advanced/rails-integration.md:435)
    - Callbacks with Rails Concerns (advanced/rails-integration.md:506)
    - Callbacks with Background Jobs (advanced/rails-integration.md:561)
    - Callbacks with Rails Instrumentation (advanced/rails-integration.md:632)
    - Best Practices for Rails Integration (advanced/rails-integration.md:688)
  - Conclusion (advanced/rails-integration.md:696)
- Stateful Agents (advanced/stateful-agents.md)
  - Core Concepts (advanced/stateful-agents.md:23)
    - State vs Memory (advanced/stateful-agents.md:25)
  - Production Patterns (advanced/stateful-agents.md:37)
    - 1. Session-Based Agent (advanced/stateful-agents.md:39)
    - 2. Persistent Memory Agent (advanced/stateful-agents.md:114)
    - 3. Multi-Context Agent (advanced/stateful-agents.md:182)
    - 4. Adaptive Learning Agent (advanced/stateful-agents.md:291)
  - Error Handling and Resilience (advanced/stateful-agents.md:393)
    - Memory Failure Recovery (advanced/stateful-agents.md:395)
    - State Corruption Recovery (advanced/stateful-agents.md:471)
  - Performance Considerations (advanced/stateful-agents.md:558)
    - Memory Usage Optimization (advanced/stateful-agents.md:560)
  - Testing Stateful Agents (advanced/stateful-agents.md:642)
    - Unit Testing with Memory (advanced/stateful-agents.md:644)
    - Integration Testing (advanced/stateful-agents.md:690)
  - Best Practices (advanced/stateful-agents.md:724)
    - 1. Memory Management (advanced/stateful-agents.md:726)
    - 2. Error Handling (advanced/stateful-agents.md:732)
    - 3. Performance (advanced/stateful-agents.md:738)
    - 4. Privacy and Security (advanced/stateful-agents.md:744)
  - Common Pitfalls (advanced/stateful-agents.md:750)
    - 1. Memory Leaks (advanced/stateful-agents.md:752)
    - 2. Context Confusion (advanced/stateful-agents.md:767)
    - 3. State Inconsistency (advanced/stateful-agents.md:782)
- CodeAct has moved (core-concepts/codeact.md)
- Event System (core-concepts/events.md)
  - Emitting Events (core-concepts/events.md:25)
  - Global Listeners (core-concepts/events.md:42)
  - Module-Scoped Subscribers (core-concepts/events.md:80)
  - Module Stack Metadata (core-concepts/events.md:136)
  - Best Practices (core-concepts/events.md:163)
- Memory (core-concepts/memory.md)
  - Basic Usage (core-concepts/memory.md:23)
    - Memory Manager (core-concepts/memory.md:25)
    - Memory Records (core-concepts/memory.md:46)
  - Memory with Agents (core-concepts/memory.md:66)
    - Using Memory Toolset (core-concepts/memory.md:68)
    - Available Memory Operations (core-concepts/memory.md:100)
  - Storage Backends (core-concepts/memory.md:114)
    - In-Memory Storage (Default) (core-concepts/memory.md:116)
    - Custom Storage (core-concepts/memory.md:126)
  - Memory Compaction (core-concepts/memory.md:147)
  - Best Practices (core-concepts/memory.md:164)
    - 1. Use Descriptive Content (core-concepts/memory.md:166)
    - 2. Use Tags for Organization (core-concepts/memory.md:180)
    - 3. Structure Memory Content (core-concepts/memory.md:194)
    - 4. Handle Memory Retrieval Gracefully (core-concepts/memory.md:211)
  - Testing Memory (core-concepts/memory.md:229)
    - Test Memory Operations (core-concepts/memory.md:231)
    - Test Agents with Memory (core-concepts/memory.md:253)
  - Limitations (core-concepts/memory.md:275)
  - Next Steps (core-concepts/memory.md:284)
- Module Runtime Context (core-concepts/module-runtime-context.md)
  - Fiber-Local LM Context (core-concepts/module-runtime-context.md:24)
    - Basic Usage (core-concepts/module-runtime-context.md:28)
    - LM Resolution Hierarchy (core-concepts/module-runtime-context.md:66)
    - Using with Different Model Types (core-concepts/module-runtime-context.md:102)
  - Lifecycle Callbacks (core-concepts/module-runtime-context.md:137)
    - Available Callback Types (core-concepts/module-runtime-context.md:141)
    - Basic Usage (core-concepts/module-runtime-context.md:147)
      - Before Callbacks (core-concepts/module-runtime-context.md:149)
      - After Callbacks (core-concepts/module-runtime-context.md:193)
      - Around Callbacks (core-concepts/module-runtime-context.md:226)
    - Combined Callbacks (core-concepts/module-runtime-context.md:271)
    - Multiple Callbacks of Same Type (core-concepts/module-runtime-context.md:341)
    - Inheritance (core-concepts/module-runtime-context.md:378)
    - Common Use Cases (core-concepts/module-runtime-context.md:413)
      - 1. Observability and Metrics (core-concepts/module-runtime-context.md:417)
      - 2. Memory and State Management (core-concepts/module-runtime-context.md:452)
      - 3. Rate Limiting and Circuit Breaking (core-concepts/module-runtime-context.md:488)
      - 4. Error Recovery and Retry Logic (core-concepts/module-runtime-context.md:524)
  - Next Steps (core-concepts/module-runtime-context.md:560)
- Production Guide (production/index.md)
  - Production Topics (production/index.md:12)
    - [Storage](./storage/) (production/index.md:14)
    - [Registry](./registry/) (production/index.md:17)
    - [Observability](./observability/) (production/index.md:20)
    - [Troubleshooting](./troubleshooting/) (production/index.md:23)
  - Key Considerations (production/index.md:26)
    - Performance (production/index.md:28)
    - Reliability (production/index.md:33)
    - Security (production/index.md:38)
    - Cost Management (production/index.md:43)
  - Deployment Checklist (production/index.md:48)
- Observability (production/observability.md)
  - Overview (production/observability.md:23)
  - Installation (production/observability.md:34)
  - Architecture (production/observability.md:46)
    - Dedicated Export Worker (production/observability.md:65)
  - Quick Start (production/observability.md:75)
    - Basic Event Emission (production/observability.md:77)
    - Event Listeners (production/observability.md:91)
    - Custom Subscribers (production/observability.md:109)
  - Observation Types (production/observability.md:133)
    - Observation Type Classification (production/observability.md:137)
    - When to Emit Each Type (production/observability.md:158)
    - Custom Observation Types (production/observability.md:230)
  - Built-in Events (production/observability.md:249)
    - LLM Events (production/observability.md:253)
    - Module Events (production/observability.md:269)
  - Type-Safe Events (production/observability.md:296)
    - Available Event Types (production/observability.md:317)
  - Common Patterns (production/observability.md:338)
    - Token Budget Tracking (production/observability.md:340)
    - Optimization Progress Tracking (production/observability.md:377)
    - Module Performance Tracking (production/observability.md:407)
  - Integration with External Systems (production/observability.md:439)
    - Event Filtering and Routing (production/observability.md:441)
    - Custom Analytics (production/observability.md:472)
  - Backward Compatibility (production/observability.md:497)
  - Configuration (production/observability.md:517)
  - Best Practices (production/observability.md:530)
  - Troubleshooting (production/observability.md:566)
    - Events Not Triggering Listeners (production/observability.md:568)
    - Memory Leaks with Subscribers (production/observability.md:577)
    - Thread Safety (production/observability.md:592)
  - Langfuse Integration (Zero Configuration) (production/observability.md:603)
    - Setup (production/observability.md:611)
    - How It Works (production/observability.md:622)
    - Example Output (production/observability.md:633)
    - GenAI Semantic Conventions (production/observability.md:721)
    - Manual Configuration (Advanced) (production/observability.md:737)
    - Dependencies (production/observability.md:754)
    - Troubleshooting Langfuse Integration (production/observability.md:762)
  - Summary (production/observability.md:777)
- Registry & Versions (production/registry.md)
  - Overview (production/registry.md:24)
  - Basic Usage (production/registry.md:33)
    - Setting Up the Registry (production/registry.md:35)
    - Registering Versions (production/registry.md:50)
    - Using RegistryManager for Automatic Integration (production/registry.md:80)
  - Version Management (production/registry.md:99)
    - Listing Versions (production/registry.md:101)
    - Updating Performance Scores (production/registry.md:120)
    - Comparing Versions (production/registry.md:136)
  - Deployment Management (production/registry.md:152)
    - Deploying Versions (production/registry.md:154)
    - Rollback (production/registry.md:171)
    - Deployment Strategies with RegistryManager (production/registry.md:184)
  - Automatic Features (production/registry.md:200)
    - Auto-Registration of Optimizations (production/registry.md:202)
    - Performance Monitoring and Rollback (production/registry.md:221)
  - Registry Management (production/registry.md:237)
    - Configuration (production/registry.md:239)
    - Deployment Status (production/registry.md:254)
    - Deployment Planning (production/registry.md:268)
    - Cleanup (production/registry.md:282)
  - Import/Export (production/registry.md:292)
    - Export Registry (production/registry.md:294)
    - Import Registry (production/registry.md:303)
  - Events and Monitoring (production/registry.md:312)
  - Best Practices (production/registry.md:331)
    - 1. Version Naming (production/registry.md:333)
    - 2. Metadata Standards (production/registry.md:349)
    - 3. Performance Tracking (production/registry.md:375)
    - 4. Conservative Deployment (production/registry.md:389)
- Storage System (production/storage.md)
  - Overview (production/storage.md:23)
  - Basic Usage (production/storage.md:32)
    - Storing Optimization Results (production/storage.md:34)
    - Using StorageManager (Recommended) (production/storage.md:58)
    - Loading Programs (production/storage.md:75)
  - Storage Organization (production/storage.md:92)
  - Finding Programs (production/storage.md:105)
    - Search by Criteria (production/storage.md:107)
    - Get Best Program (production/storage.md:130)
  - Checkpoints (production/storage.md:146)
  - Import/Export (production/storage.md:166)
  - History and Analytics (production/storage.md:182)
  - Program Comparison (production/storage.md:203)
  - Storage Management (production/storage.md:215)
    - Configuration (production/storage.md:217)
    - Cleanup Old Programs (production/storage.md:231)
    - List All Programs (production/storage.md:244)
  - Events and Monitoring (production/storage.md:262)
  - Best Practices (production/storage.md:277)
    - 1. Consistent Metadata (production/storage.md:279)
    - 2. Use Tags Effectively (production/storage.md:297)
    - 3. Regular Cleanup (production/storage.md:310)
    - 4. Checkpoint Long Optimizations (production/storage.md:323)
- Troubleshooting Guide (production/troubleshooting.md)
  - Language Model Configuration (production/troubleshooting.md:12)
    - Error: NoMethodError: undefined method 'model' for nil (production/troubleshooting.md:14)
    - Error: DSPy::ConfigurationError (production/troubleshooting.md:39)
  - Gem Conflicts (production/troubleshooting.md:61)
    - Warning: ruby-openai gem detected (production/troubleshooting.md:63)
    - Namespace Conflicts (production/troubleshooting.md:87)
  - API Key Issues (production/troubleshooting.md:105)
    - Error: DSPy::LM::MissingAPIKeyError (production/troubleshooting.md:107)
  - JSON Parsing Issues (production/troubleshooting.md:123)
    - Error: JSON parsing failures (production/troubleshooting.md:125)
  - Memory Issues (production/troubleshooting.md:169)
    - Error: Memory storage full (production/troubleshooting.md:171)
  - Performance Issues (production/troubleshooting.md:198)
    - Slow LLM responses (production/troubleshooting.md:200)
  - Testing Issues (production/troubleshooting.md:216)
    - VCR cassette errors (production/troubleshooting.md:218)
  - Common Debugging Tips (production/troubleshooting.md:232)
  - Getting Help (production/troubleshooting.md:281)